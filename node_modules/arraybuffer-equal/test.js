var test = require('tape');
var isEqual = require('./');

var x = new Uint8Array([
  0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
  0x62, 0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
  0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e]).buffer;

var ref = x;

var slice = x.slice(0);

var copy = new Uint8Array([
  0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
  0x62, 0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
  0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e]).buffer;

var smaller = new Uint8Array([
  0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
  0x62, 0x6f, 0x64, 0x79, 0x21, 0x20, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
  0x20, 0x73, 0x2e]).buffer;

var sameLengthDifferentContent = new Uint8Array([
  0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79,
  0x62, 0x6f, 0x64, 0x7c, 0x25, 0x26, 0xf0, 0x9f, 0x92, 0xa9, 0x20,
  0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x73, 0x2e]).buffer;

test('references are equal', function (t) {
  t.plan(1);
  t.assert(isEqual(x, ref));
});

test('slices are equal', function (t) {
  t.plan(1);
  t.assert(isEqual(x, slice));
});

test('literal copies are equal', function (t) {
  t.plan(1);
  t.assert(isEqual(x, copy));
});

test('differing lengths arent equal', function (t) {
  t.plan(1);
  t.assert(!isEqual(x, smaller));
});

test('differing contents arent equal', function (t) {
  t.plan(1);
  t.assert(!isEqual(x, sameLengthDifferentContent));
});
